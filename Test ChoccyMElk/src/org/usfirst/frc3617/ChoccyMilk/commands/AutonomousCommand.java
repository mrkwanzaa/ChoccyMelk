// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3617.ChoccyMilk.commands;

import org.usfirst.frc3617.ChoccyMilk.Robot;
import org.usfirst.frc3617.ChoccyMilk.RobotMap;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;


/**
 *
 */
public class AutonomousCommand extends Command {
private boolean done = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	int near = 0;
    	if(RobotMap.leftStick.getRawAxis(3) >= 0.5){
    		//auton 1
    		if(RobotMap.rightStick.getRawAxis(3) >= 0.5){
    			Robot.myRobot.arcadeDrive(-0.7, 0.6);
    			Timer.delay(2);//first drive time
    			Robot.myRobot.arcadeDrive(0, 0);
    			Timer.delay(0.7);//stop time
    			Robot.myRobot.arcadeDrive(0, -0.58);
    			Timer.delay(2.85);//turn time
    			Robot.myRobot.arcadeDrive(0, 0);
    			//this is driving forwad
    			while(near <= 5){
    				if(Robot.ultrasonic6.getValue()*0.1132075472 <= 6.5){
    					near++;
    					System.out.println(Robot.ultrasonic6.getValue()*0.1132075472);
    				}else{
    					near = 0;
    				}
    				Robot.myRobot.arcadeDrive(-0.5, 0);
    			}
    			System.out.println("Got close");
    			Robot.myRobot.arcadeDrive(0, 0);
    			Timer.delay(2);//stop time
    			Robot.myRobot.arcadeDrive(0.6, 0);
    			Timer.delay(0.5);//back away time
    			Robot.myRobot.arcadeDrive(0, 0);
    		}else{
    			//auton 2
    			//this is driving forwad
    			/*long startTime = System.currentTimeMillis();
    			while(near <= 5 || (System.currentTimeMillis()-startTime)<10000){
    				if(Robot.ultrasonic6.getValue()*0.1132075472 <= 6.5){
    					near++;
    					System.out.println(Robot.ultrasonic6.getValue()*0.1132075472);
    				}else{
    					near = 0;
    				}
    				Robot.myRobot.drive(0.3, 0);
    			}
    			*/
    			Robot.myRobot.drive(0.3, 0);
    			Timer.delay(5);
    			Robot.myRobot.drive(0, 0);
    		}
    	}else{
    		if(RobotMap.rightStick.getRawAxis(3) >= 0.5){
    			//Auton 3
    			System.out.println("He dindu nuffin");
    		}else{//Auton 4
    			System.out.println("Auton 4");
    			Robot.myRobot.drive(0.4, 0);
    			Timer.delay(4);
    			Robot.myRobot.drive(0, 0);
    		}
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    	}

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return done;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.myRobot.arcadeDrive(0, 0);
    	RobotMap.flywheelVictor.set(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.myRobot.arcadeDrive(0, 0);
    	RobotMap.flywheelVictor.set(0);
    }
}
