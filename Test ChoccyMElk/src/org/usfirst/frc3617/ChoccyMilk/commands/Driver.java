// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3617.ChoccyMilk.commands;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3617.ChoccyMilk.Robot;
import org.usfirst.frc3617.ChoccyMilk.RobotMap;

/**
 *
 */
public class Driver extends Command {
	AnalogInput exampleAnalog;
	public volatile static boolean ultra = true;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Driver() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	ultra = true;
    	printer sonicPrinter =new printer();
    	sonicPrinter.start();
    }

    // Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if(RobotMap.leftStick.getY() < 0){
    	Robot.myRobot.arcadeDrive(-RobotMap.leftStick.getY() * 0.9, -RobotMap.leftStick.getX()); 
		}else{
		Robot.myRobot.arcadeDrive(-RobotMap.leftStick.getY() * 0.9, RobotMap.leftStick.getX());	
		}
    	//RobotMap.ballbelt.set(RobotMap.rightStick.getY());
    	
    	/*if(RobotMap.spinUp.get() == true){
    		RobotMap.flywheelVictor.set(-0.365);//Shooter speed
    	}
    	else{
    		RobotMap.flywheelVictor.set(0);
    	}
	   if(RobotMap.spinagitator.get() == true){
	    		RobotMap.agitator.set(0.5); //Agitator speed
	    }
	    //else if(RobotMap.agback.get() == true){
	    	RobotMap.agitator.set(-0.5);
	    }
	    else{
	    	RobotMap.agitator.set(0);
	    }*/
	    if (RobotMap.climb.get() == true){
	    	RobotMap.climber.set(1.3);
	    }
		else{ 
			RobotMap.climber.set(0);
			}
	    
	}
	
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.flywheelVictor.set(0);
    	RobotMap.agitator.set(0);
    	RobotMap.ballbelt.set(0);
    	ultra = false;
    	}

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	RobotMap.flywheelVictor.set(0);
    	RobotMap.agitator.set(0);
    	RobotMap.ballbelt.set(0);
    	ultra = false;
    
    }



}
class printer extends Thread{ 
	public void run(){
		while(Driver.ultra == true){
			System.out.println(Robot.ultrasonic6.getValue());
			Timer.delay(0.5);//time between checks
		} 
	}
} 
